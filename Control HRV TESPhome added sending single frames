esphome:
  name: hrv-emulator
  comment: "D1 Mini emulator for HRV bus with single-poll and max-fan switches"

esp8266:
  board: d1_mini

wifi:
  ssid: "Reaver"
  password: "FigjamDilligaf74"
  manual_ip:
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  power_save_mode: none
  fast_connect: true
  ap:
    ssid: "Hrv Fallback Hotspot"
    password: "Justj33p"
  on_connect:
    then:
      - lambda: |-
          ESP_LOGI("main", "WiFi up: %s", WiFi.localIP().toString().c_str());

logger:
  baud_rate: 115200
  level: DEBUG

api:
  encryption:
    key: "hZXm4NPWC33G3NS3kzqXkXR5mHUn/PUIUY+8RTcm4Ps="

ota:
  platform: esphome
  password: "283355a588a90db0f31782330ad9f820"

web_server:
  port: 80

mqtt:
  broker: 192.168.1.44
  username: mqtt
  password: Justj33p
  topic_prefix: "hassio/hrv"
  discovery: false
  on_connect:
    then:
      - lambda: |-
          ESP_LOGI("main", "MQTT Connected");

uart:
  id: hrv_uart
  tx_pin: D1
  rx_pin: D2
  baud_rate: 1200
  stop_bits: 1

output:
  - platform: gpio
    pin: GPIO2
    inverted: true
    id: status_led

globals:
  - id: max_fan_mode
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: single_poll_mode
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: rx_buffer_string
    type: std::string
    restore_value: no
    initial_value: ""

switch:
  - platform: template
    name: "HRV Max-Fan Mode"
    id: max_fan_switch
    optimistic: true
    turn_on_action:
      - lambda: 'id(max_fan_mode) = true;'
    turn_off_action:
      - lambda: 'id(max_fan_mode) = false;'

  - platform: template
    name: "HRV Single-Poll Mode"
    id: single_poll_toggle
    optimistic: true
    turn_on_action:
      - lambda: 'id(single_poll_mode) = true;'
    turn_off_action:
      - lambda: 'id(single_poll_mode) = false;'

text_sensor:
  - platform: template
    name: "HRV Last Sent Frame"
    id: last_sent_frame

  - platform: template
    name: "HRV Last Received Frame"
    id: last_received_frame

sensor:
  - platform: wifi_signal
    name: "HRV Emulator Wi-Fi Signal"
    update_interval: 60s

interval:
  - interval: 200ms
    then:
      - lambda: |-
          uint8_t c;
          while (id(hrv_uart).read_byte(&c)) {
            char tmp[4];
            sprintf(tmp, "%02X ", c);
            id(rx_buffer_string) += tmp;
          }
          if (!id(rx_buffer_string).empty()) {
            ESP_LOGD("UART_RX", "← %s", id(rx_buffer_string).c_str());
            id(last_received_frame).publish_state(id(rx_buffer_string));
            id(rx_buffer_string).clear();
          }

  - interval: 1s
    then:
      - output.turn_on: status_led

      # Frame A: always send the “roof-poll”
      - logger.log:
          level: DEBUG
          format: "→ Frame A: 7E 30 00 C2 00 0E"
      - uart.write:
          data: [0x7E, 0x30, 0x00, 0xC2, 0x00, 0x0E]
      - lambda: |-
          id(last_sent_frame).publish_state("7E 30 00 C2 00 0E");

      - delay: 80ms

      # Frame B: only if NOT in single-poll mode
      - if:
          condition:
            lambda: 'return !id(single_poll_mode);'
          then:
            - lambda: |-
                if (id(max_fan_mode)) {
                  static const uint8_t cmdB_max[] = {0x7E,0x31,0x01,0x4E,0xFF,0x84,0x70,0x51};
                  ESP_LOGD("UART_TX","→ Frame B (MAX-FAN): 7E 31 01 4E FF 84 70 51");
                  id(hrv_uart).write_array(cmdB_max, sizeof(cmdB_max));
                  id(last_sent_frame).publish_state("7E 31 01 4E FF 84 70 51");
                } else {
                  static const uint8_t cmdB_norm[] = {0x7E,0x31,0x01,0x4E,0x21,0x1A,0x84,0x70,0x51};
                  ESP_LOGD("UART_TX","→ Frame B (NORMAL): 7E 31 01 4E 21 1A 84 70 51");
                  id(hrv_uart).write_array(cmdB_norm, sizeof(cmdB_norm));
                  id(last_sent_frame).publish_state("7E 31 01 4E 21 1A 84 70 51");
                }

      - delay: 50ms
      - output.turn_off: status_led
