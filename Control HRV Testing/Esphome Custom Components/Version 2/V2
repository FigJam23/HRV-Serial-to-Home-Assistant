substitutions:
  name: hrv-controller
  uart_tx: GPIO17  # Change to your ESP's TX pin
  uart_rx: GPIO16  # Change to your ESP's RX pin

esphome:
  name: ${name}
  platform: ESP32  # Or ESP8266 if using that
  board: nodemcu-32s  # Change to your board type

# Enable UART communication with HRV
uart:
  id: hrv_uart
  tx_pin: ${uart_tx}
  rx_pin: ${uart_rx}
  baud_rate: 9600
  parity: NONE
  stop_bits: 1

# Custom component to handle HRV protocol
external_components:
  - source:
      type: git
      url: https://github.com/FigJam23/HRV-Serial-to-Home-Assistant
      path: Control_HRV_Testing/Esphome_Custom_Components
    components: [hrv_protocol]   # Make sure the component name matches the file and class

# HRV Protocol Handler
hrv_protocol:
  id: my_hrv
  uart_id: hrv_uart
  update_interval: 1s  # Query status every second

# Sensors (from HRV responses)
sensor:
  - platform: template
    name: "HRV Outdoor Temperature"
    id: outdoor_temp
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    update_interval: 10s
    lambda: |-
      return id(my_hrv).outdoor_temp;

  - platform: template
    name: "HRV Humidity"
    id: humidity
    unit_of_measurement: "%"
    accuracy_decimals: 0
    update_interval: 10s
    lambda: |-
      return id(my_hrv).humidity;

  - platform: template
    name: "HRV Fan Speed"
    id: fan_speed
    update_interval: 10s
    lambda: |-
      return id(my_hrv).fan_speed;

  - platform: template
    name: "HRV System Status"
    id: system_status
    update_interval: 10s
    lambda: |-
      return id(my_hrv).system_status;

# Fan Control
fan:
  - platform: custom
    lambda: |-
      auto hrv_fan = new HRVFan(id(my_hrv));
      App.register_component(hrv_fan);
      return {hrv_fan};
    name: "HRV Fan"
    id: hrv_fan
    speed_count: 4  # Assuming 4 speed levels (0-3)

# Controls for Settings
number:
  - platform: template
    name: "HRV Setpoint Temperature"
    id: setpoint_temp
    min_value: 15
    max_value: 30
    step: 0.5
    set_action:
      then:
        - lambda: |-
            float value = id(setpoint_temp).state;
            id(my_hrv).set_temperature(value);

# Service to send raw commands (for debugging)
api:
  services:
    - service: send_hrv_command
      variables:
        command: string
      then:
        - lambda: |-
            id(my_hrv).send_raw_command(id(command));

# Status LED (optional)
status_led:
  pin: GPIO2

# WiFi and OTA updates
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  password: !secret ota_password

api:
  password: !secret api_password
