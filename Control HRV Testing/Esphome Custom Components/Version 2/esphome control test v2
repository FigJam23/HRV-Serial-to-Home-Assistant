substitutions:
  name: hrv-controller
  uart_tx: GPIO17  # Change to your actual TX pin
  uart_rx: GPIO16  # Change to your actual RX pin

esphome:
  name: ${name}
  platform: ESP32
  board: nodemcu-32s
  includes:
    - hrv_protocol.h  # Use local file instead of GitHub reference

# UART Configuration
uart:
  id: hrv_uart
  tx_pin: ${uart_tx}
  rx_pin: ${uart_rx}
  baud_rate: 9600
  parity: NONE
  stop_bits: 1

# HRV Protocol Component
hrv_protocol:
  id: my_hrv
  uart_id: hrv_uart
  update_interval: 1s

# Sensors using direct property access
sensor:
  - platform: template
    name: "HRV Outdoor Temperature"
    id: outdoor_temp
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    lambda: |-
      return id(my_hrv).outdoor_temp;

  - platform: template
    name: "HRV Humidity"
    id: humidity
    unit_of_measurement: "%"
    lambda: |-
      return id(my_hrv).humidity;

  - platform: template
    name: "HRV Fan Speed"
    id: fan_speed
    lambda: |-
      return id(my_hrv).fan_speed;

  - platform: template
    name: "HRV System Status"
    id: system_status
    lambda: |-
      return id(my_hrv).system_status;

# Fan Control with state restoration
fan:
  - platform: custom
    lambda: |-
      auto hrv_fan = new HRVFan(id(my_hrv));
      App.register_component(hrv_fan);
      return {hrv_fan};
    name: "HRV Fan"
    id: hrv_fan
    restore_mode: RESTORE_AND_OFF
    speed_count: 4  # Match your HRV's speed levels
    speed:
      name: "HRV Fan Speed Level"

# Temperature Setpoint Control
number:
  - platform: template
    name: "HRV Setpoint Temperature"
    id: setpoint_temp
    min_value: 15
    max_value: 30
    step: 0.5
    mode: box
    set_action:
      then:
        - lambda: |-
            float value = id(setpoint_temp).state;
            id(my_hrv).set_temperature(value);

# Boost Mode Switch
switch:
  - platform: template
    name: "HRV Boost Mode"
    id: boost_mode
    icon: "mdi:fan-plus"
    restore_state: true
    turn_on_action:
      - lambda: |-
          // Send boost mode command
          id(my_hrv).send_command(0x02, 0x01);
    turn_off_action:
      - lambda: |-
          // Send normal mode command
          id(my_hrv).send_command(0x02, 0x00);

# System Controls
button:
  - platform: template
    name: "Reset Filter Timer"
    id: reset_filter
    icon: "mdi:reload"
    on_press:
      - lambda: |-
          id(my_hrv).send_command(0x03, 0x00);

  - platform: template
    name: "Force Update"
    id: force_update
    icon: "mdi:refresh"
    on_press:
      - lambda: |-
          id(my_hrv).request_update();

# Debugging Service
api:
  services:
    - service: send_hrv_command
      variables:
        command: string
      then:
        - lambda: |-
            id(my_hrv).send_raw_command(id(command));

# Status Indicators
binary_sensor:
  - platform: status
    name: "HRV Controller Status"
    id: controller_status

  - platform: template
    name: "HRV Communication Error"
    id: comm_error
    lambda: |-
      return id(my_hrv).comm_error;

text_sensor:
  - platform: template
    name: "HRV Last Error"
    id: last_error
    lambda: |-
      return id(my_hrv).last_error;

# Hardware Watchdog
watchdog:
  id: wdt
  timeout: 60s

# WiFi and OTA
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true  # Faster reconnect

ota:
  password: !secret ota_password
  safe_mode: true
  reboot_timeout: 10min

api:
  password: !secret api_password
  reboot_timeout: 15min

# Logging level (helpful for debugging)
logger:
  level: DEBUG
  baud_rate: 0  # Disable serial logging if using UART
