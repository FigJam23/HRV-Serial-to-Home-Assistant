esphome:
  name: hrvsniffer
  comment: "D1 Mini HRV‐bus sniffer (RX only)"

esp8266:
  board: d1_mini

wifi:
  ssid: "Reaver"
  password: "FigjamDilligaf74"
  manual_ip:
    static_ip: 192.168.1.100
    gateway:   192.168.1.1
    subnet:    255.255.255.0
  power_save_mode: none
  fast_connect: true
  ap:
    ssid: "Hrv Fallback Hotspot"
    password: "Justj33p"

# disable regular serial‐to‐USB logger so it doesn't compete with UART RX
logger:
  baud_rate: 0
  level: DEBUG

api:
  encryption:
    key: "hZXm4NPWC33G3NS3kzqXkXR5mHUn/PUIUY+8RTcm4Ps="

ota:
  platform: esphome
  password: "283355a588a90db0f31782330ad9f820"


web_server:
  port: 80

mqtt:
  broker: 192.168.1.44
  username: mqtt
  password: "Justj33p"
  topic_prefix: "hassio/hrv"
  discovery: false

# ─── UART BUS SNIFFING ─────────────────────────────────────────────────────
uart:
  id: hrv_uart
  rx_buffer_size: 512     # big enough to avoid timeouts
  tx_pin: D1              # you won't ever write
  rx_pin: D2
  baud_rate: 1200
  stop_bits: 1

# ─── LED JUST TO SHOW “ALIVE” ──────────────────────────────────────────────
output:
  - platform: gpio
    pin: GPIO2
    inverted: true
    id: status_led

globals:
  - id: rx_buffer_string
    type: std::string
    restore_value: no
    initial_value: ""

# ─── LAST RECEIVED TEXT SENSOR ─────────────────────────────────────────────
text_sensor:
  - platform: template
    name: "HRV Last Received Frame"
    id: last_received_frame

# ─── WIFI SIGNAL JUST TO SHOW CONNECTION ───────────────────────────────────
sensor:
  - platform: wifi_signal
    name: "HRV Sniffer Wi-Fi Signal"
    update_interval: 60s

# ─── 200 ms SNIFF LOOP ── PULL IN _ALL_ INCOMING BYTES ─────────────────────
interval:
  - interval: 200ms
    then:
      - lambda: |-
          uint8_t c;
          std::string buf;
          // grab every waiting byte
          while (id(hrv_uart).read_byte(&c)) {
            char tmp[4];
            sprintf(tmp, "%02X ", c);
            buf += tmp;
            // blink LED so you see activity
            id(status_led).turn_on();
          }
          if (!buf.empty()) {
            // push into Home Assistant
            id(last_received_frame).publish_state(buf);
            ESP_LOGD("HRV_BUS", "← %s", buf.c_str());
            buf.clear();
          }
          // turn LED off after 
          id(status_led).turn_off();
