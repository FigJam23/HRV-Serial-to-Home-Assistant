esphome:
  name: hrv_keypad_emulator
  platform: ESP8266
  board: d1_mini

logger:
  baud_rate: 1200

wifi:
  ssid: "Reaver"
  password: "FigjamDilligaf74"

api:
  encryption:
    key: "hZXm4NPWC33G3NS3kzqXkXR5mHUn/PUIUY+8RTcm4Ps="

ota:
  platform: esphome
  password: "283355a588a90db0f31782330ad9f820"

web_server:
  port: 80

captive_portal:

# UART for HRV Bus: D1 = RX, D2 = TX
uart:
  id: hrv_uart
  tx_pin: D2
  rx_pin: D1
  baud_rate: 1200
  stop_bits: 1
  data_bits: 8
  parity: NONE
  debug:
    direction: BOTH  
globals:
  - id: hrv_state
    type: int
    restore_value: no
    initial_value: '0'

interval:
  - interval: 2s
    then:
      - if:
          condition:
            lambda: 'return id(hrv_state) == 0;'
          then:
            - lambda: |-
                static const uint8_t startup[] = {0x7E, 0x37, 0x01, 0x71, 0x00, 0x1E, 0x84, 0xB5, 0x7E};
                ESP_LOGI("hrv", "Sending startup packet");
                id(hrv_uart).write_array(startup, sizeof(startup));
                id(hrv_state) += 1;

uart:
  id: hrv_uart
  tx_pin: D2
  rx_pin: D1
  baud_rate: 1200

# Listen for reply from controller
on_uart_data:
  - id: hrv_uart
    then:
      - lambda: |-
          std::string line = "";
          while (available()) {
            uint8_t b = read();
            ESP_LOGI("hrv", "Received: %02X", b);
            line += String::format("%02X ", b);
          }

          ESP_LOGI("hrv", "Full frame: %s", line.c_str());

          // State machine: respond based on controller's reply
          if (id(hrv_state) == 1 && line.find("41 E3 DC") != std::string::npos) {
            // Controller ACK received
            ESP_LOGI("hrv", "Controller ACK received (41 E3 DC), sending zero packet...");
            static const uint8_t zero[] = {0x7E, 0x38, 0x00, 0x00, 0x00, 0xC8, 0x7E};
            id(hrv_uart).write_array(zero, sizeof(zero));
            id(hrv_state) += 1;
          }

          else if (id(hrv_state) == 2 && line.find("42 C3 FB") != std::string::npos) {
            // Next stage in handshake
            ESP_LOGI("hrv", "Controller replied with 42 C3 FB, sending 46...");
            static const uint8_t pkt46[] = {0x7E, 0x46, 0x00, 0x00, 0x00, 0xBA, 0x7E};
            id(hrv_uart).write_array(pkt46, sizeof(pkt46));
            id(hrv_state) += 1;
          }

          else if (id(hrv_state) == 3 && line.find("34 E3 E9") != std::string::npos) {
            // Final setup
            ESP_LOGI("hrv", "Got 34 response, entering polling mode...");
            id(hrv_state) += 1;
          }

          else if (id(hrv_state) >= 4 && line.find("30 00") != std::string::npos) {
            // Polling response â€” optionally reply
            static const uint8_t response[] = {0x7E, 0x30, 0x00, 0xC5, 0x00, 0x0B, 0x7E};
            id(hrv_uart).write_array(response, sizeof(response));
            ESP_LOGI("hrv", "Polling response sent.");
          }
