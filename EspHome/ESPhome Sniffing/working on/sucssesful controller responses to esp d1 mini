esphome:
  name: hrv_keypad
  friendly_name: HRV Keypad Emulator

esp8266:
  board: d1_mini

wifi:
  ssid: "Reaver"
  password: "FigjamDilligaf74"
  manual_ip:
    static_ip: 192.168.1.100
    gateway:   192.168.1.1
    subnet:    255.255.255.0
  power_save_mode: none
  fast_connect:    true

logger:
  baud_rate: 115200
  level: DEBUG

api:
  encryption:
    key: "hZXm4NPWC33G3NS3kzqXkXR5mHUn/PUIUY+8RTcm4Ps="

ota:
  platform: esphome
    
  password: "283355a588a90db0f31782330ad9f820"

web_server:
  port: 80

uart:
  id: bus
  tx_pin:
    number: D1
    #inverted: true      # open-collector emulate
  rx_pin:
    number: D2
  # inverted: false
  baud_rate: 1200
  data_bits: 8
  parity: NONE
  stop_bits: 1
  debug:
    direction: BOTH

#───────────────────────────────────────────────────────────────────────────────
# Show what you send & receive
#───────────────────────────────────────────────────────────────────────────────
text_sensor:
  - platform: template
    name: "Last TX Frame"
    id: last_tx
  - platform: template
    name: "Last RX Frame"
    id: last_rx

#───────────────────────────────────────────────────────────────────────────────
# Buttons to send each captured frame
#───────────────────────────────────────────────────────────────────────────────
button:
  - platform: template
    name: "Poll House 75"
    on_press:
      - lambda: |-
          std::vector<uint8_t> body{0x31,0x01,0x75,0x00,0x1E,0x84,0x70,0x47};
          auto send = [&](auto bdy){
            std::vector<uint8_t> f{0x7E};
            f.insert(f.end(), bdy.begin(), bdy.end());
            int sum=0; for(size_t i=1;i<f.size();++i) sum -= f[i];
            f.push_back((uint8_t)sum); f.push_back(0x7E);
            std::string s; char buf[4];
            for(auto b:f){ sprintf(buf,"%02X ",b); s+=buf; id(bus).write_byte(b); }
            id(last_tx).publish_state(s);
          };
          send(body);

  - platform: template
    name: "Poll House 74"
    on_press:
      - lambda: |-
          std::vector<uint8_t> body{0x31,0x01,0x74,0x00,0x1E,0x84,0x70,0x48};
          auto send = [&](auto bdy){
            std::vector<uint8_t> f{0x7E};
            f.insert(f.end(), bdy.begin(), bdy.end());
            int sum=0; for(size_t i=1;i<f.size();++i) sum -= f[i];
            f.push_back((uint8_t)sum); f.push_back(0x7E);
            std::string s; char buf[4];
            for(auto b:f){ sprintf(buf,"%02X ",b); s+=buf; id(bus).write_byte(b); }
            id(last_tx).publish_state(s);
          };
          send(body);

  - platform: template
    name: "Poll House 72"
    on_press:
      - lambda: |-
          std::vector<uint8_t> body{0x31,0x01,0x72,0x00,0x1E,0x84,0x70,0x4A};
          auto send = [&](auto bdy){
            std::vector<uint8_t> f{0x7E};
            f.insert(f.end(), bdy.begin(), bdy.end());
            int sum=0; for(size_t i=1;i<f.size();++i) sum -= f[i];
            f.push_back((uint8_t)sum); f.push_back(0x7E);
            std::string s; char buf[4];
            for(auto b:f){ sprintf(buf,"%02X ",b); s+=buf; id(bus).write_byte(b); }
            id(last_tx).publish_state(s);
          };
          send(body);

  - platform: template
    name: "Req 0x36"
    on_press:
      - lambda: |-
          std::vector<uint8_t> body{0x36,0x00,0x00,0x00};
          auto send=[&](auto bdy){
            std::vector<uint8_t> f{0x7E};
            f.insert(f.end(), bdy.begin(), bdy.end());
            int sum=0; for(size_t i=1;i<f.size();++i) sum -= f[i];
            f.push_back((uint8_t)sum); f.push_back(0x7E);
            std::string s; char buf[4];
            for(auto b:f){ sprintf(buf,"%02X ",b); s+=buf; id(bus).write_byte(b);}
            id(last_tx).publish_state(s);
          };
          send(body);

  - platform: template
    name: "Hello 0x37 B4"
    on_press:
      - lambda: |-
          std::vector<uint8_t> body{0x37,0x01,0x72,0x00,0x1E,0x84};
          auto send=[&](auto bdy){
            std::vector<uint8_t> f{0x7E};
            f.insert(f.end(), bdy.begin(), bdy.end());
            int sum=0; for(size_t i=1;i<f.size();++i) sum -= f[i];
            f.push_back((uint8_t)sum); f.push_back(0x7E);
            std::string s; char buf[4];
            for(auto b:f){ sprintf(buf,"%02X ",b); s+=buf; id(bus).write_byte(b);}
            id(last_tx).publish_state(s);
          };
          send(body);

  - platform: template
    name: "Cmd 0x41 E3"
    on_press:
      - lambda: |-
          std::vector<uint8_t> body{0x41,0xE3};
          auto send=[&](auto bdy){
            std::vector<uint8_t> f{0x7E};
            f.insert(f.end(), bdy.begin(), bdy.end());
            int sum=0; for(size_t i=1;i<f.size();++i) sum -= f[i];
            f.push_back((uint8_t)sum); f.push_back(0x7E);
            std::string s; char buf[4];
            for(auto b:f){ sprintf(buf,"%02X ",b); s+=buf; id(bus).write_byte(b);}
            id(last_tx).publish_state(s);
          };
          send(body);

  - platform: template
    name: "Req 0x38 C8"
    on_press:
      - lambda: |-
          std::vector<uint8_t> body{0x38,0x00,0x00,0x00};
          auto send=[&](auto bdy){
            std::vector<uint8_t> f{0x7E};
            f.insert(f.end(), bdy.begin(), bdy.end());
            int sum=0; for(size_t i=1;i<f.size();++i) sum -= f[i];
            f.push_back((uint8_t)sum); f.push_back(0x7E);
            std::string s; char buf[4];
            for(auto b:f){ sprintf(buf,"%02X ",b); s+=buf; id(bus).write_byte(b);}
            id(last_tx).publish_state(s);
          };
          send(body);

  - platform: template
    name: "Resp 0x42 C3 FB"
    on_press:
      - lambda: |-
          std::vector<uint8_t> body{0x42,0xC3,0xFB};
          auto send=[&](auto bdy){
            std::vector<uint8_t> f{0x7E};
            f.insert(f.end(), bdy.begin(), bdy.end());
            int sum=0; for(size_t i=1;i<f.size();++i) sum -= f[i];
            f.push_back((uint8_t)sum); f.push_back(0x7E);
            std::string s; char buf[4];
            for(auto b:f){ sprintf(buf,"%02X ",b); s+=buf; id(bus).write_byte(b);}
            id(last_tx).publish_state(s);
          };
          send(body);

  - platform: template
    name: "Req 0x46 BA"
    on_press:
      - lambda: |-
          std::vector<uint8_t> body{0x46,0x00,0x00,0x00};
          auto send=[&](auto bdy){
            std::vector<uint8_t> f{0x7E};
            f.insert(f.end(), bdy.begin(), bdy.end());
            int sum=0; for(size_t i=1;i<f.size();++i) sum -= f[i];
            f.push_back((uint8_t)sum); f.push_back(0x7E);
            std::string s; char buf[4];
            for(auto b:f){ sprintf(buf,"%02X ",b); s+=buf; id(bus).write_byte(b);}
            id(last_tx).publish_state(s);
          };
          send(body);

#───────────────────────────────────────────────────────────────────────────────
# RX processor: grab every 0x7E…0x7E, verify and show
#───────────────────────────────────────────────────────────────────────────────
script:
  - id: process_rx
    then:
      - lambda: |-
          static std::vector<uint8_t> buf;
          while (id(bus).available()) {
            uint8_t b; id(bus).read_byte(&b);
            if (buf.empty()) {
              if (b == 0x7E) buf.push_back(b);
              continue;
            }
            buf.push_back(b);
            if (b == 0x7E && buf.size() >= 5) {
              size_t ci = buf.size() - 2; int sum = 0;
              for (size_t i = 1; i < ci; ++i) sum -= buf[i];
              bool ok = ((uint8_t)(sum & 0xFF) == buf[ci]);
              std::string s; char tmp[4];
              for (auto x : buf) { sprintf(tmp, "%02X ", x); s += tmp; }
              id(last_rx).publish_state(s);
              buf.clear();
            }
            if (buf.size() > 32) buf.clear();
          }

interval:
  - interval: 10ms
    then:
      - script.execute: process_rx
