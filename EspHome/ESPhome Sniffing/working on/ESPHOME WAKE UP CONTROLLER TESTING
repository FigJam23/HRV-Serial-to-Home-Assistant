esphome:
  name: figjam-hrv
  friendly_name: FIGJAM HRV

esp8266:
  board: d1_mini

wifi:
  ssid: "Reaver"
  password: "FigjamDilligaf74"
  manual_ip:
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    subnet: 255.255.255.0

logger:
  baud_rate: 115200
  level: DEBUG

api:
  encryption:
    key: "hZXm4NPWC33G3NS3kzqXkXR5mHUn/PUIUY+8RTcm4Ps="

ota:
  platform: esphome
  password: "283355a588a90db0f31782330ad9f820"

web_server:
  port: 80

uart:
  id: hrv_uart
  tx_pin:
    number: D1
    inverted: true
  rx_pin:
    number: D2
    inverted: true
  baud_rate: 1200
  debug:
    direction: BOTH

globals:
  - id: last_house_raw
    type: uint16_t
    initial_value: "0x012C"
  - id: last_roof_raw
    type: uint16_t
    initial_value: "0x0100"
  - id: last_fan
    type: uint8_t
    initial_value: "10"
  - id: last_setpoint
    type: uint8_t
    initial_value: "22"
  - id: filter_days
    type: uint8_t
    restore_value: yes
    initial_value: "200"

sensor:
  - platform: template
    name: "Emu House Temp"
    lambda: |-
      return id(last_house_raw) * 0.0625f;
    unit_of_measurement: "°C"

  - platform: template
    name: "Emu Roof Temp"
    lambda: |-
      return id(last_roof_raw) * 0.0625f;
    unit_of_measurement: "°C"

  - platform: template
    name: "Emu Fan Speed"
    lambda: |-
      return id(last_fan);
    unit_of_measurement: "%"

  - platform: template
    name: "Emu Setpoint"
    lambda: |-
      return id(last_setpoint);
    unit_of_measurement: "°C"

  - platform: template
    name: "Emu Filter Days"
    lambda: |-
      return id(filter_days);
    unit_of_measurement: "days"

text_sensor:
  - platform: template
    name: "HRV Last TX Frame"
    id: hrv_last_tx

  - platform: template
    name: "HRV Last RX Frame"
    id: hrv_last_rx

button:
  - platform: template
    name: "Test Raw Hello (bench 0x37…47)"
    on_press:
      - script.execute: hrv_test_raw_37

  - platform: template
    name: "Test Raw Poll (bench 0x31…47)"
    on_press:
      - script.execute: hrv_test_raw_31

  - platform: template
    name: "Test Startup (0x37 twice + 0x38)"
    on_press:
      - script.execute: hrv_keypad_startup

  - platform: template
    name: "Test 0x36"
    on_press:
      - script.execute: hrv_test_36

  - platform: template
    name: "Test 0x37"
    on_press:
      - script.execute: hrv_test_37

  - platform: template
    name: "Test Roof-Poll (0x30)"
    on_press:
      - script.execute: hrv_test_poll30

  - platform: template
    name: "Test House-Poll (0x31)"
    on_press:
      - script.execute: hrv_test_poll31

  - platform: template
    name: "Test Filter-Req (0x38)"
    on_press:
      - script.execute: hrv_test_filter

script:
  - id: hrv_test_raw_37
    then:
      - lambda: |-
          const uint8_t raw37[] = {0x7E,0x37,0x01,0x75,0x00,0x1E,0x84,0x70,0x47,0x7E};
          for (auto b : raw37) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 37 01 75 00 1E 84 70 47 7E");

  - id: hrv_test_raw_31
    then:
      - lambda: |-
          const uint8_t raw31[] = {0x7E,0x31,0x01,0x75,0x00,0x1E,0x84,0x70,0x47,0x7E};
          for (auto b : raw31) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 31 01 75 00 1E 84 70 47 7E");

  - id: hrv_keypad_startup
    then:
      # Step 1: send hello frame twice
      - lambda: |-
          const uint8_t h1[] = {0x7E,0x37,0x01,0x71,0x00,0x1E,0x84,0xB5,0x7E};
          for (auto b : h1) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 37 01 71 00 1E 84 B5 7E");
      - delay: 200ms
      - lambda: |-
          const uint8_t h2[] = {0x7E,0x37,0x01,0x71,0x00,0x1E,0x84,0xB5,0x7E};
          for (auto b : h2) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 37 01 71 00 1E 84 B5 7E");
      - delay: 200ms
      # Step 2: send filter request
      - lambda: |-
          const uint8_t fr[] = {0x7E,0x38,0x00,0x00,0x00,0xC8,0x7E};
          for (auto b : fr) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 38 00 00 00 C8 7E");

  - id: hrv_test_36
    then:
      - lambda: |-
          const uint8_t f36[] = {0x7E,0x36,0x00,0x00,0x00,0xCA,0x7E};
          for (auto b : f36) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 36 00 00 00 CA 7E");

  - id: hrv_test_37
    then:
      - lambda: |-
          const uint8_t f37[] = {0x7E,0x37,0x01,0x6A,0x00,0x1E,0x84,0xBC,0x7E};
          for (auto b : f37) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 37 01 6A 00 1E 84 BC 7E");

  - id: hrv_test_poll30
    then:
      - lambda: |-
          const uint8_t p30[] = {0x7E,0x30,0x01,0x24,0x00,0xAB,0x7E};
          for (auto b : p30) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 30 01 24 00 AB 7E");

  - id: hrv_test_poll31
    then:
      - lambda: |-
          const uint8_t p31[] = {0x7E,0x31,0x01,0x2C,0x0A,0x16,0x00,0x00,0x82,0x7E};
          for (auto b : p31) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 31 01 2C 0A 16 00 00 82 7E");

  - id: hrv_test_filter
    then:
      - lambda: |-
          const uint8_t fr2[] = {0x7E,0x38,0x00,0x00,0x00,0xC8,0x7E};
          for (auto b : fr2) id(hrv_uart).write_byte(b);
          id(hrv_last_tx).publish_state("7E 38 00 00 00 C8 7E");

  - id: hrv_process_controller
    then:
      - lambda: |-
          static std::vector<uint8_t> buf;
          auto *uart = id(hrv_uart);
          while (uart->available()) {
            uint8_t b;
            uart->read_byte(&b);
            if (buf.empty()) {
              if (b == 0x7E) buf.push_back(b);
              continue;
            }
            buf.push_back(b);
            if (b == 0x7E && buf.size() >= 5) {
              size_t cks = buf.size() - 2;
              int sum = 0;
              for (size_t i = 1; i < cks; i++) sum -= buf[i];
              if ((uint8_t)(sum & 0xFF) == buf[cks]) {
                std::string s;
                for (auto x : buf) {
                  char h[4];
                  sprintf(h, "%02X ", x);
                  s += h;
                }
                id(hrv_last_rx).publish_state(s);
                uint8_t t = buf[1];
                if      (t == 0x30 && buf.size()==7) id(last_roof_raw)  = (buf[2]<<8)|buf[3];
                else if (t == 0x34 && buf.size()==5) id(last_house_raw) = (buf[2]<<8)|buf[3];
                else if (t == 0x33 && buf.size()==5) id(last_fan)       = buf[2];
                else if (t == 0x43 && buf.size()==5) id(last_setpoint)  = buf[2];
                else if (t == 0x42 && buf.size()==5) id(filter_days)    = buf[2];
              }
              buf.clear();
            }
            if (buf.size() > 32) buf.clear();
          }

interval:
  - interval: 80ms
    then:
      - script.execute: hrv_process_controller
