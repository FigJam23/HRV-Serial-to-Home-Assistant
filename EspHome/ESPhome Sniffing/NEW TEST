esphome:
  name: hrv
  friendly_name: HRV
  on_boot:
    - priority: 600.0
      then:
        - delay: 1s
        - script.execute: hrv_init_sequence

esp8266:
  board: d1_mini

wifi:
  ssid: "Reaver"
  password: "FigjamDilligaf74"
  manual_ip:
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  power_save_mode: none
  fast_connect: true
  reboot_timeout: 5min
  ap:
    ssid: "Hrv Fallback Hotspot"
    password: "Justj33p"

logger:
  baud_rate: 115200
  level: DEBUG

api:
  encryption:
    key: "hZXm4NPWC33G3NS3kzqXkXR5mHUn/PUIUY+8RTcm4Ps="

ota:
  platform: esphome
  password: "283355a588a90db0f31782330ad9f820"

web_server:
  port: 80

uart:
  id: hrv_uart
  rx_pin: D1
  tx_pin: D2
  baud_rate: 1200
  debug:
    direction: BOTH


globals:
  - id: panel_rev
    type: uint8_t
    initial_value: '0x71'
  - id: got_ack
    type: bool
    initial_value: "false"
  - id: fan_sent
    type: bool
    initial_value: "false"

script:
  # top‚Äëlevel init that sends hello + config
  - id: hrv_init_sequence
    then:
      - lambda: |-
          id(got_ack) = false;
          id(fan_sent) = false;
      - script.execute: hrv_handshake
      - delay: 100ms
      - script.execute: hrv_config_sequence

  # (1) handshake ‚Äúhello‚Äù frames
  - id: hrv_handshake
    then:
      - lambda: |-
          for (int i = 0; i < 2; i++) {
            uint8_t pp = id(panel_rev);
            uint8_t buf[6] = {0x37, 0x01, pp, 0x00, 0x1E, 0x84};
            int    sum = 0;
            for (auto b: buf) sum += b;
            uint8_t cks = (uint8_t)((0x100 - (sum & 0xFF)) & 0xFF);
            uint8_t frame[9] = {
              0x7E,
              buf[0], buf[1], buf[2], buf[3], buf[4], buf[5],
              cks,
              0x7E
            };
            id(hrv_uart).write_array(frame, 9);
            ESP_LOGI("emu","‚ñ∂ Hello #%d ‚Üí %02X %02X %02X %02X %02X %02X",
              i+1, buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
            delay(50);
          }

  # (2) four ‚Äúconfig‚Äù frames
  - id: hrv_config_sequence
    then:
      - lambda: |-
          for (int i = 0; i < 4; i++) {
            uint8_t frame[7] = {0x7E, 0x38, 0x00, 0x00, 0x00, 0xC8, 0x7E};
            id(hrv_uart).write_array(frame, 7);
            ESP_LOGI("emu","‚ñ∂ Config #%d ‚Üí %02X %02X %02X %02X %02X",
              i+1, frame[1], frame[2], frame[3], frame[4], frame[5]);
            delay(50);
          }

  # (3) send the ‚Äúset fan‚Äù frame once we get an ACK
  - id: hrv_set_fan
    parameters:
      speed: int
    then:
      - lambda: |-
          uint8_t pp = id(panel_rev);
          uint8_t sp = (uint8_t)speed;
          uint8_t buf[6] = {0x37, 0x01, pp, sp, 0x1E, 0x84};
          int    sum = 0;
          for (auto b: buf) sum += b;
          uint8_t cks = (uint8_t)((0x100 - (sum & 0xFF)) & 0xFF);
          uint8_t frame[9] = {
            0x7E,
            buf[0], buf[1], buf[2], buf[3], buf[4], buf[5],
            cks,
            0x7E
          };
          id(hrv_uart).write_array(frame, 9);
          ESP_LOGI("emu","‚ñ∂ Set‚Äëfan=%d%% ‚Üí %02X %02X %02X", speed,
            buf[0], buf[1], buf[3]);

  # (4) UART parser: catch 0x41 ACKs *and* log every other reply
  - id: hrv_process_uart
    then:
      - lambda: |-
          static std::vector<uint8_t> frame;
          while (id(hrv_uart).available()) {
            uint8_t b; id(hrv_uart).read_byte(&b);
            if (frame.empty()) {
              if (b == 0x7E) frame.push_back(b);
              continue;
            }
            frame.push_back(b);
            if (b == 0x7E && frame.size() >= 5) {
              uint8_t t = frame[1];
              // Got ACK?
              if (t == 0x41 && !id(got_ack)) {
                id(got_ack) = true;
                ESP_LOGI("emu","‚úÖ Got ACK ‚Üí %02X %02X %02X %02X %02X",
                  frame[0], frame[1], frame[2], frame[3], frame[4]);
              }
              // Any other reply we haven‚Äôt explicitly sent
              else if (t != 0x37 && t != 0x38) {
                ESP_LOGI("emu","üîÑ Reply type %02X, %zu bytes:", t, frame.size());
                for (auto &bb : frame) {
                  ESP_LOGI("emu","    %02X", bb);
                }
              }
              frame.clear();
            }
            if (frame.size() > 20) frame.clear();
          }



interval:
  # keep parsing in tight loop
  - interval: 80ms
    then:
      - script.execute: hrv_process_uart

  # drive init/fan
  - interval: 2s
    then:
      - lambda: |-
          if (!id(got_ack)) {
            id(hrv_init_sequence).execute();
          } else if (!id(fan_sent)) {
            id(hrv_set_fan).execute(100);
            id(fan_sent) = true;
          }
