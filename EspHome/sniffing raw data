esphome:
  name: hrv_raw_sniffer
  friendly_name: HRV_Raw_Sniffer

esp8266:
  board: d1_mini

wifi:
  ssid: "Reaver"
  password: "FigjamDilligaf74"
  manual_ip:
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  power_save_mode: none
  fast_connect: true


api:
  encryption:
    key: "hZXm4NPWC33G3NS3kzqXkXR5mHUn/PUIUY+8RTcm4Ps="

ota:
  platform: esphome
  password: "283355a588a90db0f31782330ad9f820"

web_server:
  port: 80

logger:
  baud_rate: 115200
  level: DEBUG

uart:
  id: bus_uart
  rx_pin: D2
  baud_rate: 1200

script:
  - id: capture_frame
    then:
      - lambda: |-
          static bool in_frame = false;
          static std::vector<uint8_t> frame;
          while (id(bus_uart).available()) {
            uint8_t b;
            id(bus_uart).read_byte(&b);

            if (b == 0x7E) {
              if (!in_frame) {
                // start
                in_frame = true;
                frame.clear();
                frame.push_back(b);
              } else {
                // end
                frame.push_back(b);
                if (frame.size() > 2) {
                  // build hex string
                  std::string hex;
                  char buf[4];
                  for (auto v : frame) {
                    snprintf(buf, sizeof(buf), "%02X", v);
                    hex += buf;
                    hex += ' ';
                  }
                  hex.pop_back();  // drop trailing space

                  // log only
                  ESP_LOGI("raw_sniffer", "Frame: %s", hex.c_str());
                }
                // reset
                in_frame = false;
                frame.clear();
              }
            } else if (in_frame) {
              frame.push_back(b);
              if (frame.size() >= 128) {
                // too long: abort
                in_frame = false;
                frame.clear();
              }
            }
          }

interval:
  - interval: 20ms
    then:
      - script.execute: capture_frame
