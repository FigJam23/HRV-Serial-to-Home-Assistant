#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>

// ─── HRV constants ──────────────────────────────────────────────────────────
#define MSGSTARTSTOP     0x7E
#define HRVROOF          0x30
#define HRVHOUSE         0x31
#define HRVHUMIDITY_PKT  0x37  // identify a humidity packet
#define HRVFILTER_PKT    0x07  // filter life
#define HRVENT_PKT       0x05  // ventilation level
#define HRVKWH_PKT       0x06  // kWh saved
#define HRVVER_PKT       0x01  // version/model + fw

// ─── MQTT topics ────────────────────────────────────────────────────────────
// status & raw
#define HASSIOHRVSTATUS       "hassio/hrv/status"
#define HASSIOHRVRAW          "hassio/hrv/raw"

// temps + control
#define HASSIOHRVSUBHOUSE     "hassio/hrv/housetemp"
#define HASSIOHRVSUBROOF      "hassio/hrv/rooftemp"
#define HASSIOHRVSUBCONTROL   "hassio/hrv/controltemp"
#define HASSIOHRVSUBFANSPEED  "hassio/hrv/fanspeed"

// humidity
#define HASSIOHRVHUMIDITY_RAW "hassio/hrv/humidity_raw"
#define HASSIOHRVHUMIDITY     "hassio/hrv/humidity"

// flags
#define HASSIOHRVFLAGS_RAW    "hassio/hrv/flags_raw"
#define HASSIOHRVFLAGS_DEC    "hassio/hrv/flags_dec"
#define HASSIOHRVFLAGS_BIN    "hassio/hrv/flags_bin"
#define HASSIOHRVFLAGS_BIT    "hassio/hrv/flag/bit"   // append 0–7

// new sensors
#define HASSIOHRVFILTER_LIFE  "hassio/hrv/filter_life"
#define HASSIOHRVVENT_LEVEL   "hassio/hrv/ventilation_level"
#define HASSIOHRVKWH_SAVED    "hassio/hrv/kwh_saved"
#define HASSIOHRVVER_MODEL    "hassio/hrv/version/model"
#define HASSIOHRVVER_FW       "hassio/hrv/version/fw"

// manual‐command topic (unused here)
#define HASSIOHRVMANUAL       "hassio/hrv/manual"

// ─── Wi-Fi creds & MQTT broker ───────────────────────────────────────────────
const char* ssid         = "Reaver";
const char* password     = "FigjamDilligaf74";
IPAddress   MQTT_SERVER  = IPAddress(192,168,1,44);
const char* mqttUser     = "mqtt";
const char* mqttPassword = "Justj33p";

// ─── HRV TTL bus on D2=RX, D1=TX ────────────────────────────────────────────
SoftwareSerial hrvSerial(D2, D1);

// ─── Parser state & globals ─────────────────────────────────────────────────
bool    bStarted        = false, bEnded = false;
byte    inData[10], bIndex = 0, bChecksum = 0;
float   fHRVTemp, fHRVLastRoof = 255, fHRVLastHouse = 255;
int     iHRVControlTemp, iHRVFanSpeed,
        iHRVLastControl = 255, iHRVLastFanSpeed = 255;
int     iTotalDelay     = 0;
char    eTempLoc;

WiFiClient   wifiClient;
PubSubClient mqttClient(MQTT_SERVER, 1883, wifiClient);
String       clientId;
char         message_buff[16];
String       pubString;

// ─────────────────────────────────────────────────────────────────────────────
// FORWARD DECLARATIONS
// ─────────────────────────────────────────────────────────────────────────────
void    myDelay(int ms);
void    startWIFI();
String  decToHex(byte val, byte width);
unsigned int hexToDec(String hex);
void    SendMQTTMessage();
void    mqttCallback(char* topic, byte* payload, unsigned int length);

// ─────────────────────────────────────────────────────────────────────────────
// SETUP
// ─────────────────────────────────────────────────────────────────────────────
void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);

  hrvSerial.begin(1200);
  Serial.begin(115200);
  delay(10);

  startWIFI();
  clientId = "hrv-" + WiFi.macAddress();
  mqttClient.setCallback(mqttCallback);
  mqttClient.setServer(MQTT_SERVER, 1883);
  mqttClient.subscribe(HASSIOHRVMANUAL);

  bIndex = bChecksum = 0;
  iTotalDelay = 0;
}

// ─────────────────────────────────────────────────────────────────────────────
// MAIN LOOP
// ─────────────────────────────────────────────────────────────────────────────
void loop() {
  if (!mqttClient.connected()) {
    startWIFI();
    Serial.println("Connecting to MQTT…");
    clientId = "hrv-" + WiFi.macAddress();
    // force full resend
    iHRVLastFanSpeed = iHRVLastControl = 255;
    fHRVLastRoof     = fHRVLastHouse   = 255;
    while (!mqttClient.connect(clientId.c_str(), mqttUser, mqttPassword)) {
      Serial.printf("MQTT rc=%d, retrying in 2s\n", mqttClient.state());
      for (int i=0; i<5; i++) {
        digitalWrite(LED_BUILTIN, LOW);  delay(50);
        digitalWrite(LED_BUILTIN, HIGH); delay(50);
      }
      delay(2000);
    }
    Serial.println("MQTT OK");
  }
  mqttClient.loop();

  // LED = data present
  digitalWrite(LED_BUILTIN, hrvSerial.available() ? HIGH : LOW);
  if (hrvSerial.available()) {
    Serial.print("Bytes on HRV bus: ");
    Serial.println(hrvSerial.available());
  }

  // ─── Read + buffer ───────────────────────────────────────────────────────
  while (hrvSerial.available()) {
    int c = hrvSerial.read();
    if (c == MSGSTARTSTOP || bIndex > 8) {
      if (!bStarted) {
        bStarted = true;
        bIndex = 0;
      } else {
        bChecksum = bIndex - 1;
        bEnded    = true;
        break;
      }
    }
    if (bStarted && bIndex < sizeof(inData)) {
      inData[bIndex++] = c;
    }
  }

  // ─── Validate checksum ────────────────────────────────────────────────────
  if (bStarted && bEnded && bChecksum > 0) {
    int sum = 0;
    for (int i=1; i<bChecksum; i++) sum -= inData[i];
    byte calc = byte(sum & 0xFF);
    if (calc != inData[bChecksum] || bIndex < 6) {
      bStarted = bEnded = false;
      bIndex = 0;
      hrvSerial.flush();
    }
  }

  // ─── Process complete packet ──────────────────────────────────────────────
  if (bStarted && bEnded && bIndex > 5) {
    // parse temp/control/fan
    String hx1 = decToHex(inData[2],2),
           hx2 = decToHex(inData[3],2);
    eTempLoc = inData[1];

    if (eTempLoc == HRVHOUSE) {
      iHRVFanSpeed    = inData[4];
      iHRVControlTemp = inData[5];
    }
    fHRVTemp = hexToDec(hx1 + hx2) * 0.0625;

    // ── Handle special packet types ─────────────────────────────────────────
    switch (eTempLoc) {
      case HRVHUMIDITY_PKT: {
        // the controller actually sends a 0–100-ish byte in inData[3].
        byte rawRH = inData[3];
        // publish raw
        sprintf(message_buff, "%u", rawRH);
        mqttClient.publish(HASSIOHRVHUMIDITY_RAW, message_buff);
        // scale so 96→66 (%), tweak divisor if needed
        float humid = rawRH * 100.0 / 144.0;
        dtostrf(humid,5,1,message_buff);
        mqttClient.publish(HASSIOHRVHUMIDITY, message_buff);
        Serial.printf("→ Humidity: %s %%RH (raw=%u)\n", message_buff, rawRH);
      } break;

      case HRVFILTER_PKT: {
        byte rawFL = inData[3];
        float flife = rawFL * 100.0 / 255.0;
        dtostrf(flife,5,1,message_buff);
        mqttClient.publish(HASSIOHRVFILTER_LIFE, message_buff);
        Serial.printf("→ Filter Life: %s %%\n", message_buff);
      } break;

      case HRVENT_PKT: {
        byte lvl = inData[3];
        sprintf(message_buff, "%u", lvl);
        mqttClient.publish(HASSIOHRVVENT_LEVEL, message_buff);
        Serial.printf("→ Vent Level: %u\n", lvl);
      } break;

      case HRVKWH_PKT: {
        byte kwh = inData[3];
        sprintf(message_buff, "%u", kwh);
        mqttClient.publish(HASSIOHRVKWH_SAVED, message_buff);
        Serial.printf("→ kWh Saved: %u\n", kwh);
      } break;

      case HRVVER_PKT: {
        byte mdl = inData[3], fw = inData[4];
        sprintf(message_buff, "%02X", mdl);
        mqttClient.publish(HASSIOHRVVER_MODEL, message_buff);
        sprintf(message_buff, "%02X", fw);
        mqttClient.publish(HASSIOHRVVER_FW, message_buff);
        Serial.printf("→ Model:%02X FW:%02X\n", mdl, fw);
      } break;
    }

    // ── FLAGS byte ────────────────────────────────────────────────────────
    byte flags = inData[6];
    sprintf(message_buff, "%02X", flags);
    mqttClient.publish(HASSIOHRVFLAGS_RAW, message_buff);
    sprintf(message_buff, "%u", flags);
    mqttClient.publish(HASSIOHRVFLAGS_DEC, message_buff);
    {
      String bstr;
      for (int b=7; b>=0; b--) bstr += ((flags>>b)&1)?'1':'0';
      mqttClient.publish(HASSIOHRVFLAGS_BIN, bstr.c_str());
    }
    for (int b=0; b<8; b++) {
      sprintf(message_buff, "%d", (flags>>b)&1);
      char tpc[32];
      sprintf(tpc, "%s%d", HASSIOHRVFLAGS_BIT, b);
      mqttClient.publish(tpc, message_buff);
    }

    // ── RAW packet log ────────────────────────────────────────────────────
    {
      String raw;
      for (int i=0; i<bIndex; i++) {
        if (inData[i]<0x10) raw += '0';
        raw += String(inData[i], HEX) + ' ';
      }
      raw.toUpperCase();
      mqttClient.publish(HASSIOHRVRAW, raw.c_str());
    }

    // ── Finally send temp/control/fan ──────────────────────────────────────
    SendMQTTMessage();

    bStarted = bEnded = false;
    bIndex = 0;
  }

  // ─── Keep-alive ping every 30 s ───────────────────────────────────────────
  if (iTotalDelay >= 30000) {
    mqttClient.publish(HASSIOHRVSTATUS, "1");
    iTotalDelay = 0;
  }
}

// ─────────────────────────────────────────────────────────────────────────────
// MQTT CALLBACK (manual cmds, if you ever use them)
// ─────────────────────────────────────────────────────────────────────────────
void mqttCallback(char* topic, byte* payload, unsigned int len) {
  Serial.printf("MQTT ‹%s› ← ", topic);
  for (unsigned int i=0; i<len; i++) Serial.printf("%02X ", payload[i]);
  Serial.println();
}

// ─────────────────────────────────────────────────────────────────────────────
// HELPERS
// ─────────────────────────────────────────────────────────────────────────────
String decToHex(byte v, byte w) {
  String s = String(v, HEX);
  while (s.length()<w) s = "0"+s;
  return s;
}
unsigned int hexToDec(String hex) {
  unsigned int v=0;
  for (char c:hex) {
    int d = isdigit(c)?c-'0'
          : isupper(c)?c-'A'+10
          : islower(c)?c-'a'+10:0;
    v = v*16 + d;
  }
  return v;
}

void SendMQTTMessage() {
  if (!mqttClient.connected()) return;
  // publish temp
  int t2 = int(fHRVTemp*2 + 0.5);
  fHRVTemp = t2 / 2.0;
  pubString = String(fHRVTemp);
  pubString.toCharArray(message_buff, pubString.length()+1);
  if (eTempLoc==HRVHOUSE && fHRVTemp!=fHRVLastHouse) {
    fHRVLastHouse = fHRVTemp;
    mqttClient.publish(HASSIOHRVSUBHOUSE, message_buff);
  }
  else if (eTempLoc==HRVROOF && fHRVTemp!=fHRVLastRoof) {
    fHRVLastRoof = fHRVTemp;
    mqttClient.publish(HASSIOHRVSUBROOF, message_buff);
  }
  // publish control
  if (iHRVControlTemp!=iHRVLastControl) {
    pubString = String(iHRVControlTemp);
    pubString.toCharArray(message_buff, pubString.length()+1);
    iHRVLastControl = iHRVControlTemp;
    mqttClient.publish(HASSIOHRVSUBCONTROL, message_buff);
  }
  // publish fan
  if (iHRVFanSpeed!=iHRVLastFanSpeed) {
    iHRVLastFanSpeed = iHRVFanSpeed;
    if      (iHRVFanSpeed==0)   pubString="Off";
    else if (iHRVFanSpeed==5)   pubString="Idle";
    else if (iHRVFanSpeed==100) pubString="Full";
    else                         pubString=String(iHRVFanSpeed)+"%";
    pubString.toCharArray(message_buff, pubString.length()+1);
    mqttClient.publish(HASSIOHRVSUBFANSPEED, message_buff);
  }
  // flash LED briefly
  digitalWrite(LED_BUILTIN, LOW);  delay(50);
  digitalWrite(LED_BUILTIN, HIGH); delay(200);
}

void myDelay(int ms) {
  for (int i=0; i<ms; i++) {
    delay(1);
    if ((i & 0x3F)==0) mqttClient.loop();
  }
  iTotalDelay += ms;
}

void startWIFI() {
  if (WiFi.status()==WL_CONNECTED) return;
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  WiFi.begin(ssid,password);
  int tries=0;
  while (WiFi.status()!=WL_CONNECTED) {
    delay(2000);
    if (++tries>450) ESP.reset();
  }
  delay(500);
}
