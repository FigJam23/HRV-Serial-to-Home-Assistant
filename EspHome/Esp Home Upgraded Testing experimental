esphome:
  name: hrv
  friendly_name: HRV

esp8266:
  board: d1_mini

# Wi-Fi setup
wifi:
  ssid: "Rer"
  password: "Fig4"
  ap:
    ssid: "Hrv Fallback Hotspot"
    password: "UFTWi1OCP7LR"

# Optional OTA & logging
logger:

ota:
  password: "acf68590bb"

api:
  encryption:
    key: "5rEiRSMiuT051v1c="

mqtt:
  id: hrv_mqtt
  broker: 192.168.1.44
  username: mqtt
  password: Justj33p
  discovery: false
  topic_prefix: "hrv"

# Status LED (onboard GPIO2 LED)
output:
  - platform: gpio
    pin: GPIO2
    id: led
    inverted: true

# UART for HRV TTL input
uart:
  id: hrv_uart
  rx_pin: D1
  tx_pin: D2
  baud_rate: 1200

# Globals to store state
globals:
  - id: raw_buf
    type: std::string
    restore_value: false
    initial_value: ""

  - id: last_house_temp
    type: float
    restore_value: no
    initial_value: "0"

  - id: last_roof_temp
    type: float
    restore_value: no
    initial_value: "0"

  - id: last_fan_speed
    type: int
    restore_value: no
    initial_value: "255"

  - id: last_setpoint
    type: int
    restore_value: no
    initial_value: "255"

  - id: last_fan_mode
    type: std::string
    restore_value: no
    initial_value: "\"\""

# HRV sensor readings
sensor:
  - platform: template
    name: "HRV House Temp"
    id: hrv_house_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: template
    name: "HRV Roof Temp"
    id: hrv_roof_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: template
    name: "HRV Control Setpoint"
    id: hrv_setpoint
    unit_of_measurement: "°C"
    accuracy_decimals: 0

  - platform: template
    name: "HRV Fan Speed"
    id: hrv_fan_speed
    unit_of_measurement: "%"
    icon: "mdi:fan"

# Fan status string like "Idle", "Full (heating)", etc.
text_sensor:
  - platform: template
    name: "HRV Fan Mode"
    id: hrv_fan_mode

# Main UART parsing logic
script:
  - id: parse_hrv
    then:
      - lambda: |-
          static std::vector<uint8_t> buf;
          while (id(hrv_uart).available()) {
            uint8_t c;
            if (!id(hrv_uart).read_byte(&c)) continue;

            // Raw frame logging
            {
              char tmp[4];
              sprintf(tmp, "%02X ", c);
              id(raw_buf) += tmp;
              if (id(raw_buf).size() > 100) id(raw_buf).erase(0, id(raw_buf).size() - 100);
            }

            // Start/end marker
            if (c == 0x7E) {
              if (buf.size() >= 7) {
                // Validate checksum
                uint8_t checksum = 0;
                for (size_t i = 1; i < buf.size() - 2; i++) checksum -= buf[i];
                if (checksum != buf[buf.size() - 2]) {
                  buf.clear();
                  continue;
                }

                // Extract values
                char loc = buf[1];
                uint16_t raw_temp = (uint16_t(buf[2]) << 8) | buf[3];
                float temp = round(float(raw_temp) * 0.0625 * 2.0) / 2.0;
                uint8_t fan_speed = buf[4];
                uint8_t setpoint = buf[5];

                // Publish temps if changed
                if (loc == 0x31 && temp != id(last_house_temp)) {
                  id(last_house_temp) = temp;
                  id(hrv_house_temp).publish_state(temp);
                } else if (loc == 0x30 && temp != id(last_roof_temp)) {
                  id(last_roof_temp) = temp;
                  id(hrv_roof_temp).publish_state(temp);
                }

                if (setpoint != id(last_setpoint)) {
                  id(last_setpoint) = setpoint;
                  id(hrv_setpoint).publish_state(setpoint);
                }

                if (fan_speed != id(last_fan_speed)) {
                  id(last_fan_speed) = fan_speed;
                  id(hrv_fan_speed).publish_state(fan_speed);
                }

                // Determine fan mode
                std::string fan_status;
                if (fan_speed == 0) {
                  fan_status = "Off";
                } else if (fan_speed == 5) {
                  fan_status = "Idle";
                } else if (fan_speed == 100) {
                  if (id(last_setpoint) >= id(last_roof_temp) && id(last_roof_temp) > id(last_house_temp))
                    fan_status = "Full (heating)";
                  else if (id(last_roof_temp) <= id(last_setpoint) && id(last_roof_temp) < id(last_house_temp))
                    fan_status = "Full (cooling)";
                  else
                    fan_status = "Full";
                } else {
                  char tmp[16];
                  sprintf(tmp, "%d%%", fan_speed);
                  fan_status = tmp;
                }

                if (fan_status != id(last_fan_mode)) {
                  id(last_fan_mode) = fan_status;
                  id(hrv_fan_mode).publish_state(fan_status);
                }

                // Publish raw frame
                id(hrv_mqtt).publish("raw_frame", id(raw_buf).c_str());
              }

              // Always reset for next frame
              buf.clear();
              id(raw_buf).clear();
            } else {
              buf.push_back(c);
              if (buf.size() > 20) {
                buf.clear();
                id(raw_buf).clear();
              }
            }

            // LED feedback
            if (buf.empty()) id(led).turn_on();
            else             id(led).turn_off();
          }

# Run parser every 100ms
interval:
  - interval: 100ms
    then:
      - script.execute: parse_hrv
