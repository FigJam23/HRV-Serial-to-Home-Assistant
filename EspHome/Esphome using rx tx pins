esphome:
  name: hrv
  friendly_name: HRV

esp8266:
  board: d1_mini

wifi:
  ssid: "Reaver"
  password: "FigjamDilligaf74"
  manual_ip:
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  power_save_mode: none
  fast_connect: true
  reboot_timeout: 5min
  ap:
    ssid: "Hrv Fallback Hotspot"
    password: "Justj33p"

logger:
  baud_rate: 0 #115200
  level: DEBUG

api:
  encryption:
    key: "0ap5Gl/tOFssnNkBPeNVX9D8WeX+xg5mRdqSnzCUwu4="

ota:
  - platform: esphome
    password: "1d00fa18998ed67cbfc153810c48dbf7"


web_server:
  port: 80

mqtt:
  id: hrv_mqtt
  broker: 192.168.1.44
  username: mqtt
  password: Justj33p
  discovery: false
  topic_prefix: "hassio/hrv"
  keepalive: 60s
  on_connect:
    - lambda: |-
        ESP_LOGD("MQTT", "Connected");
        id(last_house_temp) = 255; 
        id(last_roof_temp)  = 255; 
        id(last_setpoint)   = 255; 
        id(last_fan_speed)  = 255;
  on_disconnect:
    - lambda: |-
        ESP_LOGD("MQTT", "Disconnected");

output:
  - platform: gpio
    pin: GPIO2
    id: led
    inverted: true

uart:
  id: hrv_uart
  rx_pin: 1 #D2
  tx_pin: 3

  baud_rate: 1200

globals:
  - id: raw_buf
    type: std::string
    restore_value: no
    initial_value: ""
  - id: last_house_temp
    type: float
    restore_value: no
    initial_value: "255"
  - id: last_roof_temp
    type: float
    restore_value: no
    initial_value: "255"
  - id: last_fan_speed
    type: int
    restore_value: no
    initial_value: "255"
  - id: last_setpoint
    type: int
    restore_value: no
    initial_value: "255"
  - id: last_fan_mode
    type: std::string
    restore_value: no
    initial_value: "\"\""
  - id: last_humidity
    type: float
    restore_value: no
    initial_value: "0"
  - id: last_activity
    type: uint32_t
    restore_value: no
    initial_value: "0"

sensor:
  - platform: template
    name: "HRV House Temp"
    id: hrv_house_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: template
    name: "HRV Roof Temp"
    id: hrv_roof_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: template
    name: "HRV Control Setpoint"
    id: hrv_setpoint
    unit_of_measurement: "°C"
    accuracy_decimals: 0

  - platform: template
    name: "HRV Fan Speed"
    id: hrv_fan_speed
    unit_of_measurement: "%"
    icon: "mdi:fan"
    accuracy_decimals: 1

  - platform: template
    name: "HRV Humidity"
    id: hrv_humidity
    unit_of_measurement: "%"
    accuracy_decimals: 1

  - platform: wifi_signal
    name: "HRV WiFi Signal"
    id: hrv_wifi_signal
    update_interval: 30s

text_sensor:
  - platform: template
    name: "HRV Fan Mode"
    id: hrv_fan_mode

  - platform: template
    name: "HRV Flags Decimal"
    id: hrv_flags_dec

  - platform: template
    name: "HRV Flags Binary"
    id: hrv_flags_bin

  - platform: template
    name: "HRV Raw Frame"
    id: hrv_raw_frame

  - platform: template
    name: "HRV Humidity Raw"
    id: hrv_humidity_raw

binary_sensor:
  - platform: template
    name: "HRV Flag Bit 0"
    id: hrv_flag_bit0
  - platform: template
    name: "HRV Flag Bit 1"
    id: hrv_flag_bit1
  - platform: template
    name: "HRV Flag Bit 2"
    id: hrv_flag_bit2
  - platform: template
    name: "HRV Flag Bit 3"
    id: hrv_flag_bit3
  - platform: template
    name: "HRV Flag Bit 4"
    id: hrv_flag_bit4
  - platform: template
    name: "HRV Flag Bit 5"
    id: hrv_flag_bit5
  - platform: template
    name: "HRV Flag Bit 6"
    id: hrv_flag_bit6
  - platform: template
    name: "HRV Flag Bit 7"
    id: hrv_flag_bit7

script:
  - id: hrv_process_uart
    then:
      - lambda: |-
          /*
            ESPHome decoder that emulates the Arduino logic you supplied:

            Frame format (variable length):
              0: 0x7E (start)
              1: location (0x31 house / 0x30 roof)
              2: temp high
              3: temp low
              4: (house only) fan speed
              5: (house only) control setpoint
              ...
              N: checksum
              N+1: 0x7E (end)  <-- we re-use same start/end marker

            We accept frames 7..10 bytes long (your examples are 7E 30 01 0B 00 C4 7E and 7E 31 01 15 00 BA 7E etc.).
            For a *roof* frame (0x30) there is no fan or setpoint in the same positions as house frame in Arduino code,
            so we only parse temperature.
          */

          static std::vector<uint8_t> frame;

          auto publish_fan_mode = [&](int raw){
            std::string mode;
            if      (raw == 0)   mode = "Off";
            else if (raw == 5)   mode = "Idle";
            else if (raw == 100) mode = "Full";
            else {
              char t[10]; snprintf(t,sizeof(t), "%d%%", raw);
              mode = t;
            }
            id(hrv_fan_mode).publish_state(mode);
          };

          while (id(hrv_uart).available()) {
            uint8_t b=0;
            id(hrv_uart).read_byte(&b);
            id(last_activity) = millis();

            // Wait for start marker
            if (frame.empty()) {
              if (b == 0x7E) {
                frame.push_back(b);
              }
              continue;
            }

            frame.push_back(b);

            // End marker?
            if (b == 0x7E && frame.size() >= 5) {
              // Build hex string & publish raw frame (like Arduino HASSIOHRVRAW)
              std::string hex;
              char h[4];
              for (size_t i=0;i<frame.size();++i){
                snprintf(h,sizeof(h), "%02X ", frame[i]);
                hex += h;
              }
              if (!hex.empty()) hex.pop_back();
              id(hrv_raw_frame).publish_state(hex.c_str());

              // Basic length sanity (max we expect ~10)
              if (frame.size() <= 12) {
                // Remove start and end for checksum calculation:
                // Arduino sums bytes 1..bChecksum-1 (where bChecksum = last index -1)
                // Here: data bytes are indices 1..(size-2), checksum = (size-2)
                if (frame.size() >= 6) {
                  const size_t last_idx = frame.size() - 1;      // end 0x7E
                  const size_t cks_idx  = frame.size() - 2;      // checksum byte
                  // compute negative sum
                  int sum = 0;
                  for (size_t i=1; i<cks_idx; ++i) sum -= frame[i];
                  uint8_t calc = uint8_t(sum & 0xFF);
                  uint8_t expect = frame[cks_idx];

                  // Only decode if checksum matches
                  if (calc == expect) {
                    uint8_t location = frame[1];

                    // Temperature raw: bytes 2 & 3 (high, low)
                    if (frame.size() >= 6) {
                      uint16_t rawT = (uint16_t(frame[2]) << 8) | frame[3];
                      float temp = rawT * 0.0625f;
                      // Round to nearest 0.5 like Arduino
                      int t2 = int(temp * 2 + 0.5f);
                      temp = t2 / 2.0f;

                      if (location == 0x31) { // house
                        if (temp != id(last_house_temp)) {
                          id(last_house_temp)=temp;
                          id(hrv_house_temp).publish_state(temp);
                        }
                      } else if (location == 0x30) { // roof
                        if (temp != id(last_roof_temp)) {
                          id(last_roof_temp)=temp;
                          id(hrv_roof_temp).publish_state(temp);
                        }
                      }
                    }

                    if (location == 0x31) {
                      // Fan speed (byte 4) & control setpoint (byte 5) if present
                      if (frame.size() >= 8) {
                        uint8_t fan_raw = frame[4];
                        if (fan_raw != id(last_fan_speed)) {
                          id(last_fan_speed)=fan_raw;
                          id(hrv_fan_speed).publish_state(fan_raw);
                          publish_fan_mode(fan_raw);
                        }
                        uint8_t setpoint = frame[5];
                        if (setpoint != id(last_setpoint)) {
                          id(last_setpoint)=setpoint;
                          id(hrv_setpoint).publish_state(setpoint);
                        }
                      }
                    }
                  } else {
                    ESP_LOGD("hrv", "Checksum mismatch calc=%02X expect=%02X frame=%s",
                             calc, expect, hex.c_str());
                  }
                }
              }

              frame.clear();
              continue;
            }

            // Abort overly long garbage
            if (frame.size() > 20) {
              frame.clear();
            }
          }


interval:
  - interval: 50ms
    then:
      - script.execute: hrv_process_uart

  - interval: 30s
    then:
      - lambda: |-
          id(hrv_mqtt).publish("status", "1");

  - interval: 10s
    then:
      - lambda: |-
          if (millis() - id(last_activity) > 300000) {
            ESP_LOGW("WATCHDOG", "No UART activity for 5 minutes, rebooting");
            App.reboot();
          }
