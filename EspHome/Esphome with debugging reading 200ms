esphome:
  name: hrv
  friendly_name: HRV

esp8266:
  board: d1_mini

wifi:
  ssid: "Reaver"
  password: "Figjam"
  manual_ip:
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  power_save_mode: none
  fast_connect: true
  reboot_timeout: 5min
  ap:
    ssid: "Hrv Fallback Hotspot"
    password: "Just"

logger:
  baud_rate: 115200
  level: DEBUG

api:
  encryption:
    key: "hZXm4NPWC33G3NS3kzqXkXR5mHUn/PUIUY+8RTcm4Ps="

ota:
  platform: esphome
  password: "283355a588a90db0f31782330ad9f820"


web_server:
  port: 80

mqtt:
  id: hrv_mqtt
  broker: 192.168.1.44
  username: mqtt
  password: Justj33p
  discovery: false
  topic_prefix: "hassio/hrv"
  keepalive: 60s
  on_connect:
    - lambda: |-
        ESP_LOGD("MQTT", "Connected");
        id(last_house_temp) = 255; 
        id(last_roof_temp)  = 255; 
        id(last_setpoint)   = 255; 
        id(last_fan_speed)  = 255;
  on_disconnect:
    - lambda: |-
        ESP_LOGD("MQTT", "Disconnected");

output:
  - platform: gpio
    pin: GPIO2
    id: led
    inverted: true

uart:
  id: hrv_uart
  rx_pin: D2
  baud_rate: 1200

globals:
  - id: raw_buf
    type: std::string
    restore_value: no
    initial_value: ""
  - id: last_house_temp
    type: float
    restore_value: no
    initial_value: "255"
  - id: last_roof_temp
    type: float
    restore_value: no
    initial_value: "255"
  - id: last_fan_speed
    type: int
    restore_value: no
    initial_value: "255"
  - id: last_setpoint
    type: int
    restore_value: no
    initial_value: "255"
  - id: last_fan_mode
    type: std::string
    restore_value: no
    initial_value: "\"\""
  - id: last_humidity
    type: float
    restore_value: no
    initial_value: "0"
  - id: last_activity
    type: uint32_t
    restore_value: no
    initial_value: "0"

sensor:
  - platform: template
    name: "HRV House Temp"
    id: hrv_house_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: template
    name: "HRV Roof Temp"
    id: hrv_roof_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: template
    name: "HRV Control Setpoint"
    id: hrv_setpoint
    unit_of_measurement: "°C"
    accuracy_decimals: 0

  - platform: template
    name: "HRV Fan Speed"
    id: hrv_fan_speed
    unit_of_measurement: "%"
    icon: "mdi:fan"
    accuracy_decimals: 1

  - platform: template
    name: "HRV Humidity"
    id: hrv_humidity
    unit_of_measurement: "%"
    accuracy_decimals: 1

  - platform: wifi_signal
    name: "HRV WiFi Signal"
    id: hrv_wifi_signal
    update_interval: 30s

text_sensor:
  - platform: template
    name: "HRV Fan Mode"
    id: hrv_fan_mode

  - platform: template
    name: "HRV Flags Decimal"
    id: hrv_flags_dec

  - platform: template
    name: "HRV Flags Binary"
    id: hrv_flags_bin

  - platform: template
    name: "HRV Raw Frame"
    id: hrv_raw_frame

  - platform: template
    name: "HRV Humidity Raw"
    id: hrv_humidity_raw

binary_sensor:
  - platform: template
    name: "HRV Flag Bit 0"
    id: hrv_flag_bit0
  - platform: template
    name: "HRV Flag Bit 1"
    id: hrv_flag_bit1
  - platform: template
    name: "HRV Flag Bit 2"
    id: hrv_flag_bit2
  - platform: template
    name: "HRV Flag Bit 3"
    id: hrv_flag_bit3
  - platform: template
    name: "HRV Flag Bit 4"
    id: hrv_flag_bit4
  - platform: template
    name: "HRV Flag Bit 5"
    id: hrv_flag_bit5
  - platform: template
    name: "HRV Flag Bit 6"
    id: hrv_flag_bit6
  - platform: template
    name: "HRV Flag Bit 7"
    id: hrv_flag_bit7

script:
  - id: parse_hrv
    then:
      - lambda: |-
          static std::vector<uint8_t> buf;
          static bool bStarted = false, bEnded = false;
          static uint8_t bChecksum = 0;

          const uint8_t MSG    = 0x7E;
          const uint8_t ROOF   = 0x30;
          const uint8_t HOUSE  = 0x31;
          const uint8_t HUMPKT = 0x37;

          uint8_t c;
          if (!id(hrv_uart).read_byte(&c)) return;
          id(last_activity) = millis();

          // packet start/end marker
          if (c == MSG) {
            if (!bStarted) {
              bStarted = true;
              buf.clear();
              id(raw_buf).clear();
            } else if (buf.size() > 1) {
              bChecksum = buf.size();
              bEnded = true;
            }
            return;
          }

          // collect payload
          if (bStarted && buf.size() < 16) {
            buf.push_back(c);
            char tmp[4];
            sprintf(tmp, "%02X ", c);
            id(raw_buf) += tmp;
            if (id(raw_buf).size() > 200) {
              id(raw_buf) = id(raw_buf).substr(id(raw_buf).size() - 200);
            }
          }

          // parse completed packet
          if (bStarted && bEnded) {
            int sum = 0;
            for (size_t i = 0; i < bChecksum - 1; i++) sum -= buf[i];
            uint8_t calc   = sum & 0xFF;
            uint8_t expect = buf[bChecksum - 1];

            if (calc == expect) {
              uint8_t loc = buf[0];
              uint16_t rt = (uint16_t(buf[1]) << 8) | buf[2];
              float temp  = round(rt * 0.0625 * 2.0) / 2.0;

              // publish house/roof temp
              if (loc == HOUSE && temp != id(last_house_temp)) {
                id(last_house_temp) = temp;
                id(hrv_house_temp).publish_state(temp);
              } else if (loc == ROOF && temp != id(last_roof_temp)) {
                id(last_roof_temp) = temp;
                id(hrv_roof_temp).publish_state(temp);
              }

              // fan speed & mode
              uint8_t f = buf[3];
              if (f != id(last_fan_speed)) {
                id(last_fan_speed) = f;
                id(hrv_fan_speed).publish_state(f);
                std::string mode;
                if      (f == 0)   mode = "Off";
                else if (f == 5)   mode = "Idle";
                else if (f == 100) mode = "Full";
                else {
                  char b2[16];
                  sprintf(b2, "%d%%", f);
                  mode = b2;
                }
                id(hrv_fan_mode).publish_state(mode);
              }

              // ◉ SETPOINT = buf[4], raw byte = °C
              uint8_t raw_sp = buf[4];
              if (raw_sp != id(last_setpoint)) {
                id(last_setpoint) = raw_sp;
                id(hrv_setpoint).publish_state(raw_sp);
                ESP_LOGD("MQTT", "Published setpoint: %d°C", raw_sp);
              }

              // ◉ FLAGS = buf[5]
              uint8_t flags = buf[5];
              id(hrv_flags_dec).publish_state(std::to_string(flags));
              {
                char hx[3];
                sprintf(hx, "%02X", flags);
                id(hrv_mqtt).publish("flags_raw", hx);
              }
              {
                std::string bs;
                for (int b = 7; b >= 0; b--) bs += ((flags >> b)&1) ? '1':'0';
                id(hrv_flags_bin).publish_state(bs);
              }
              // individual bits
              id(hrv_flag_bit0).publish_state((flags >> 0)&1);
              id(hrv_flag_bit1).publish_state((flags >> 1)&1);
              id(hrv_flag_bit2).publish_state((flags >> 2)&1);
              id(hrv_flag_bit3).publish_state((flags >> 3)&1);
              id(hrv_flag_bit4).publish_state((flags >> 4)&1);
              id(hrv_flag_bit5).publish_state((flags >> 5)&1);
              id(hrv_flag_bit6).publish_state((flags >> 6)&1);
              id(hrv_flag_bit7).publish_state((flags >> 7)&1);

              // humidity packet?
              if (loc == HUMPKT) {
                uint8_t rh = buf[3];
                float hum = rh * 100.0 / 255.0;
                if (hum != id(last_humidity)) {
                  id(last_humidity) = hum;
                  id(hrv_humidity).publish_state(hum);
                }
                char rstr[4];
                sprintf(rstr, "%u", rh);
                id(hrv_humidity_raw).publish_state(rstr);
              }

              // raw frame
              id(hrv_raw_frame).publish_state(id(raw_buf));
            }

            // blink LED
            id(led).turn_off();
            id(led).turn_on();
            // reset
            bStarted = false;
            bEnded = false;
            buf.clear();
            id(raw_buf).clear();
          }

interval:
  - interval: 30s
    then:
      - lambda: |-
          id(hrv_mqtt).publish("status", "1");
  - interval: 200ms
    then:
      - script.execute: parse_hrv
  - interval: 10s
    then:
      - lambda: |-
          if (millis() - id(last_activity) > 300000) {
            ESP_LOGW("WATCHDOG", "No UART or MQTT activity for 5 minutes, rebooting");
            App.reboot();
          }
