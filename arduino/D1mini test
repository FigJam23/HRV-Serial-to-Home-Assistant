'val ok';
    g('filterPct').textContent=s.filter_pct;
    const fr=g('fanRange'); fr.disabled=s.slider_disabled;
    if(!fr.dragging) fr.value=s.fan_target;
    const br=s.boost_remaining_s||0,bt=s.boost_total_s||300;
    if(s.boost&&br>0){const m=Math.floor(br/60),sec=br%60;
      g('boostBtn').textContent=`Burnt Toast (${m}:${sec<10?'0':''}${sec})`;
      g('btinfo').textContent=` ${Math.round(100*br/bt)}% left`;
    }else{g('boostBtn').textContent=s.boost?'Burnt Toast (ON)':'Burnt Toast (OFF)';g('btinfo').textContent='';}
    g('boostBtn').disabled=s.power_off;
  }catch(e){}}
g('powerBtn').onclick=()=>q('/api/power?toggle=1');
g('boostBtn').onclick =()=>q('/api/boost?toggle=1');
const fr=g('fanRange');
fr.oninput =()=>{fr.dragging=true; g('fanT').textContent=fr.value}
fr.onchange=()=>{fetch('/api/setfan?val='+fr.value); fr.dragging=false}
loadMQTT(); loadWiFi(); loadOverrides(); loadTimers(); setInterval(tick,1000); tick();
</script></body></html>
)HTML";

// Simple OTA page (same endpoints as your ESP32 version)
static const char OTA_HTML[] PROGMEM = R"OTA(
<!doctype html><html><head><meta charset=utf-8><meta name=viewport content="width=device-width,initial-scale=1">
<title>HRV OTA</title><style>body{font-family:system-ui,Arial;margin:16px}</style></head>
<body><h3>HRV Keypad OTA Update</h3>
<form method="POST" action="/ota" enctype="multipart/form-data"><input type="file" name="update" required>
<input type="submit" value="Upload & Flash"></form>
<p>After a successful upload the device will reboot automatically.</p></body></html>
)OTA";

// ===== HTTP handlers =====
static void handle_root(){ web.send_P(200,"text/html",INDEX_HTML); }

static void handle_status(){
  struct tm tmNow; char hhmm[6]="--:--";
  time_t now=time(nullptr); if (now>0){ localtime_r(&now,&tmNow); strftime(hhmm,sizeof(hhmm),"%H:%M",&tmNow); }
  int lifePct = (int)round(hrv_days_remaining * 100.0 / 730.0);
  IPAddress ip = WiFi.isConnected()? WiFi.localIP() : WiFi.softAPIP();
  String mac = WiFi.macAddress();
  String wifiMode = WiFi.isConnected() ? "STA" : (ap_mode ? "AP" : "DISCONNECTED");
  String ssid     = WiFi.isConnected() ? WiFi.SSID() : (ap_mode ? String(AP_SSID) : "");

  String json="{";
  json += "\"ip\":\""+ip.toString()+"\",";
  json += "\"rssi\":"+String(WiFi.isConnected()?WiFi.RSSI():0)+",";
  json += "\"wifi_mode\":\""+wifiMode+"\",";
  json += "\"ssid\":\""+ssid+"\",";
  json += "\"mac\":\""+mac+"\",";
  json += "\"time\":\""+String(hhmm)+"\",";
  json += "\"house\":"; json += (last_house_temp==255)?"null,":String(last_house_temp,1)+",";
  json += "\"hum\":";   json += (isnan(last_house_hum))?"null,":String(last_house_hum,1)+",";
  json += "\"roof\":";  json += (last_roof_temp==255)?"null,":String(last_roof_temp,1)+",";
  json += "\"power_off\":" + String(power_off?"true":"false") + ",";
  json += "\"boost\":"     + String(boost_active?"true":"false") + ",";
  json += "\"boost_remaining_s\":" + String(boost_remaining_s()) + ",";
  json += "\"boost_total_s\":"     + String((int)(boost_duration_ms/1000)) + ",";
  json += "\"slider_disabled\":" + String((power_off||boost_active)?"true":"false") + ",";
  json += "\"auto\":"     + String(auto_mode?"true":"false") + ",";
  json += "\"setpoint\":" + String(setpoint_c,1) + ",";
  json += "\"fan_target\":"+ String(target_percent) + ",";
  json += "\"fan_actual\":"+ String(last_fan_speed==255 ? target_percent : last_fan_speed) + ",";
  json += "\"filter_pct\":"+ String(lifePct) + ",";
  json += "\"filter_text\":\""+ String(lifePct<=0 ? "REPLACE" : "OK") + "\",";
  json += "\"mode\":\""+ current_mode() +"\"";
  json += "}";
  web.send(200,"application/json",json);
}

static void handle_setfan(){
  if (boost_active || power_off){ web.send(200,"application/json","{\"ok\":false}"); return; }
  int p = web.hasArg("val") ? web.arg("val").toInt() : target_percent;
  p = constrain(p,0,100); target_percent=p; if (p>0) last_nonzero_percent=p;
  send_fan_now(p);
  auto_mode=false; manual_hold_until_ms = millis()+manual_hold_ms;
  web.send(200,"application/json","{\"ok\":true}");
}
static void handle_power(){ if (!power_off) apply_power_off(); else apply_power_on(); web.send(200,"application/json","{\"ok\":true}"); }
static void handle_boost(){ if (power_off){ web.send(200,"application/json","{\"ok\":false}"); return;} if (boost_active) stop_burnt_toast(); else start_burnt_toast(); web.send(200,"application/json","{\"ok\":true}"); }

static void handle_setpoint(){
  if (!web.hasArg("c")){ web.send(400,"application/json","{\"ok\":false,\"err\":\"missing c\"}"); return; }
  float v = constrain(web.arg("c").toFloat(), 5.0f, 35.0f); save_setpoint(v);
  web.send(200,"application/json","{\"ok\":true}");
}
static void handle_auto(){
  if (web.hasArg("mode")){
    String m = web.arg("mode");
    if (m=="manual"){ auto_mode=false; manual_hold_until_ms = millis()+manual_hold_ms; }
    else { auto_mode=true; manual_hold_until_ms = 0; if (!power_off && !boost_active) auto_control_task(true); }
  }
  web.send(200,"application/json","{\"ok\":true}");
}

static void handle_mqtt_cfg(){
  bool changed=false;
  if (web.hasArg("host")){ String v=web.arg("host"); v.trim(); if (v.length()) {mqtt_host=v; changed=true; save_mqtt();} }
  if (web.hasArg("port")){ int v=web.arg("port").toInt(); if (v>=1 && v<=65535){ mqtt_port=(uint16_t)v; changed=true; save_mqtt(); } }
  if (web.hasArg("user")){ mqtt_user=web.arg("user"); changed=true; save_mqtt(); }
  if (web.hasArg("pass")){ mqtt_pass=web.arg("pass"); changed=true; save_mqtt(); }
  if (changed){ mqtt.disconnect(); web.send(200,"application/json","{\"ok\":true}"); return; }
  String js="{\"host\":\""+mqtt_host+"\",\"port\":"+String(mqtt_port)+",\"user\":\""+mqtt_user+"\",\"pass\":\""+mqtt_pass+"\"}";
  web.send(200,"application/json",js);
}
static void handle_wifi_cfg(){
  bool changed=false;
  if (web.hasArg("ssid")){ String v=web.arg("ssid"); v.trim(); if (v.length()){ sta_ssid=v; changed=true; save_wifi(); } }
  if (web.hasArg("pass")){ sta_pass=web.arg("pass"); changed=true; save_wifi(); }
  if (changed){
    WiFi.disconnect(true); delay(100); ap_mode=false;
    web.send(200,"application/json","{\"ok\":true}");
    return;
  }
  String js="{\"ssid\":\""+sta_ssid+"\",\"pass\":\""+sta_pass+"\"}";
  web.send(200,"application/json",js);
}
static void handle_mqtt_overrides(){
  bool changed=false;
  if (web.hasArg("in_ht")){ mqtt_in_house_temp_topic=web.arg("in_ht"); changed=true; }
  if (web.hasArg("in_hh")){ mqtt_in_house_hum_topic =web.arg("in_hh"); changed=true; }
  if (web.hasArg("in_rt")){ mqtt_in_roof_temp_topic =web.arg("in_rt"); changed=true; }
  if (web.hasArg("in_rh")){ mqtt_in_roof_hum_topic  =web.arg("in_rh"); changed=true; }
  if (changed){ save_overrides(); if (mqtt.connected()) mqtt.disconnect(); web.send(200,"application/json","{\"ok\":true}"); return; }
  String js="{";
  js += "\"in_ht\":\""+mqtt_in_house_temp_topic+"\",";
  js += "\"in_hh\":\""+mqtt_in_house_hum_topic+"\",";
  js += "\"in_rt\":\""+mqtt_in_roof_temp_topic+"\",";
  js += "\"in_rh\":\""+mqtt_in_roof_hum_topic+"\"}";
  web.send(200,"application/json",js);
}
static void handle_timers_cfg(){
  bool changed=false;
  if (web.hasArg("boost_min")){ int m=constrain(web.arg("boost_min").toInt(),1,240); boost_duration_ms=(uint32_t)m*60000UL; changed=true; }
  if (web.hasArg("hold_min")) { int m=constrain(web.arg("hold_min").toInt(), 1,240); manual_hold_ms   =(uint32_t)m*60000UL; changed=true; }
  if (changed){ save_main(); if (mqtt.connected()) mqtt.publish(T_BOOST_TOTAL_S, String((int)(boost_duration_ms/1000)).c_str(), true);
    web.send(200,"application/json","{\"ok\":true}"); return; }
  String js="{\"boost_min\":"+String((int)(boost_duration_ms/60000UL))+",\"hold_min\":"+String((int)(manual_hold_ms/60000UL))+"}";
  web.send(200,"application/json",js);
}

// OTA
static void handle_ota_root(){ web.send_P(200,"text/html",OTA_HTML); }
static void handle_ota_upload(){
  HTTPUpload& up = web.upload();
  if (up.status == UPLOAD_FILE_START) {
    size_t maxSketchSpace = (ESP.getFreeSketchSpace() - 0x1000) & 0xFFFFF000;
    if (!Update.begin(maxSketchSpace)) { Update.printError(Serial); }
  } else if (up.status == UPLOAD_FILE_WRITE) {
    if (Update.write(up.buf, up.currentSize) != up.currentSize) { Update.printError(Serial); }
  } else if (up.status == UPLOAD_FILE_END) {
    if (!Update.end(true)) { Update.printError(Serial); }
  }
}
static void handle_ota_result(){
  if (Update.hasError()) web.send(200,"text/plain","OTA FAILED"); else web.send(200,"text/plain","OK. Rebootingâ€¦");
  delay(500); ESP.restart();
}

// ===== Wi-Fi / mDNS =====
static uint32_t wifi_begin_ms = 0;
static void start_web_if_needed(){
  if (web_started) return;
  web.on("/",            handle_root);
  web.on("/status",      handle_status);
  web.on("/api/setfan",  handle_setfan);
  web.on("/api/power",   handle_power);
  web.on("/api/boost",   handle_boost);
  web.on("/api/setpoint",handle_setpoint);
  web.on("/api/auto",    handle_auto);
  web.on("/mqtt",        handle_mqtt_cfg);
  web.on("/wifi",        handle_wifi_cfg);
  web.on("/mqtt_overrides", handle_mqtt_overrides);
  web.on("/timers",      handle_timers_cfg);
  web.on("/ota", HTTP_GET,  handle_ota_root);
  web.on("/ota", HTTP_POST, handle_ota_result, handle_ota_upload);
  web.begin();
  web_started=true;
}
static void wifi_loop_task(){
  if (ap_mode){ if (!web_started) start_web_if_needed(); return; }
  if (WiFi.status()==WL_CONNECTED){
    if (!mdns_started){ if (MDNS.begin("hrv-keypad")) MDNS.addService("http","tcp",80); mdns_started=true; }
    if (!web_started) start_web_if_needed();
    return;
  }
  if (wifi_begin_ms==0){
    WiFi.mode(WIFI_STA);
    WiFi.begin(sta_ssid.c_str(), sta_pass.c_str());
    wifi_begin_ms = millis();
    return;
  }
  if (millis()-wifi_begin_ms > 8000){
    WiFi.disconnect(true);
    delay(100);
    WiFi.mode(WIFI_AP);
    WiFi.softAP(AP_SSID, AP_PASS);
    ap_mode = true;
    if (!web_started) start_web_if_needed();
  }
}

// ===== SHT31 poller =====
static uint32_t last_sht_ms = 0;
static const uint32_t SHT_PERIOD_MS = 30000;  // 30s

static bool sht_ok = false;

static void poll_sht31() {
  if (!sht_ok) return;

  float t = sht31.readTemperature();
  float h = sht31.readHumidity();

  if (!isnan(t)) {
    last_house_temp = roundf(t * 10) / 10.0f;
    ts_house = millis();
    if (mqtt.connected()) {
      mqtt.publish(T_HOUSE_TEMP, String(last_house_temp, 1).c_str(), true);
    }
  }
  if (!isnan(h)) {
    last_house_hum = roundf(h * 10) / 10.0f;
    if (mqtt.connected()) {
      mqtt.publish(T_HOUSE_HUM, String(last_house_hum, 1).c_str(), true);
    }
  }
}
